# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
sys.path.insert(0, os.path.abspath('./ros_precland/camera_trigger/scripts'))
sys.path.insert(0, os.path.abspath('./_extensions'))
import yaml
import sphinx_rtd_theme
import sphinx_bootstrap_theme
import errno
import sphinx.util.osutil
sphinx.util.osutil.ENOENT = errno.ENOENT


# -- Project information -----------------------------------------------------

project = u'BeagleSystems Software'
copyright = u'2021, BeagleSystems GmbH'
author = u'BeagleSystems GmbH'

# The short X.Y version
version = u''
# The full version, including alpha/beta/rc tags
release = u''


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.todo',
    'sphinx.ext.viewcode',
    'sphinx.ext.autodoc',
    'sphinx.ext.extlinks',
    'sphinx.ext.graphviz',
    'sphinx_jinja',
    'sphinxcontrib.mermaid',
    'sphinxcontrib.napoleon',
    'custom',
]

mermaid_cmd = "node_modules/.bin/mmdc"
mermaid_output_format = "svg"

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

if True:
    html_theme = 'sphinx_rtd_theme'
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

    # Theme options are theme-specific and customize the look and feel of a theme
    # further.  For a list of options available for each theme, see the
    # documentation.
    #
    # html_theme_options = {}

    # Add any paths that contain custom static files (such as style sheets) here,
    # relative to this directory. They are copied after the builtin static files,
    # so a file named "default.css" will overwrite the builtin "default.css".
    html_static_path = ['_static']
    html_css_files = []
else:
    html_theme = 'bootstrap'
    html_theme_path = [sphinx_bootstrap_theme.get_html_theme_path()]
    html_static_path = ['_static']
    html_css_files = [
            "css/custom.css"
    ]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'BeagleSystems-doc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    'preamble': r'''
    \usepackage{pdflscape}
    ''',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'BeagleSystems.tex', u'BeagleSystems Documentation',
     u'BeagleSystems GmbH', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'BeagleSystems', u'BeagleSystems Software Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'BeagleSystems', u'BeagleSystems Software Documentation',
     author, 'BeagleSystems', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
# epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

if hasattr(yaml, "FullLoader"):
    mqtt_interface_all = yaml.load(open("./rtk_client/config/rtk.yaml", "r"), Loader=yaml.FullLoader)
else:
    mqtt_interface_all = yaml.load(open("./rtk_client/config/rtk.yaml", "r"))
mqtt_interface = mqtt_interface_all.copy()
mqtt_interface["bridge"] = []
mqtt_interface["messages"] = dict()

def add_message(messages, msg_package, msg_name):
    msgp = msg_package.replace(".", "/")
    print(msgp, "./mavros/{}/{}.msg".format(msgp, msg_name))
    if not os.path.exists("./mavros/{}/{}.msg".format(msgp, msg_name)):
        return False
    with open("./mavros/{}/{}.msg".format(msgp, msg_name)) as fp:
        fields = []
        for i, field in enumerate(fp):
            comment = ""
            split = field.split("#", 1)
            if len(split) == 2:
                field, comment = split
            field = field.strip()
            if len(field) > 0:
                field_type, field_name = field.split(" ")
                # recursively add messages assuming they are in the same package
                field_type_simple = field_type
                if add_message(messages, msg_package, field_type):
                    field_type = "{}:{}".format(msg_package, field_type)
                if field_type.endswith("[]") and  add_message(messages, msg_package, field_type[:-2]):
                    field_type = "{}:{}".format(msg_package, field_type)
                if not "drop" in bridge or field_name not in bridge["drop"]:
                    d = dict(index=i, type=field_type, type_simple=field_type_simple, name=field_name, comment=comment)
                    if field_type.endswith("[]"):
                        d["ref"] = field_type[:-2]
                    else:
                        d["ref"] = field_type
                    fields.append(d)
        messages["{}:{}".format(msg_package, msg_name)] = {
            "fields": fields,
            "package": msg_package,
            "name": msg_name
        }
        return True
    return False

for bridge in mqtt_interface_all["bridge"]:
    if bridge["msg_type"].startswith("beagle_interfaces"):
        msg_package, msg_name = bridge["msg_type"].split(":")
        add_message(mqtt_interface["messages"], msg_package, msg_name)
        mqtt_topic = bridge["topic_to"] if bridge["factory"] == "mqtt_bridge.bridge:RosToMqttBridge" else bridge["topic_from"]
        mqtt_interface["bridge"].append({
            "direction": "out" if bridge["factory"] == "mqtt_bridge.bridge:RosToMqttBridge" else "in",
            "type": bridge["msg_type"],
            "type_simple": "{}/{}".format(msg_package[:-4], msg_name),
            "mqtt_topic": mqtt_topic,
            "mqtt_topic_ref": "mt_" + mqtt_topic.replace("~/", "").replace("/", "-"),
            "ros_topic": bridge["topic_from"] if bridge["factory"] == "mqtt_bridge.bridge:RosToMqttBridge" else bridge["topic_to"],
            "timestamp": bridge.get("timestamp", False)
        })
        print(mqtt_interface["bridge"][-1])

print(mqtt_interface["messages"])
jinja_contexts = {
    'mqtt_ctx': {
        "interface": mqtt_interface,
    },
    'ros_messages_ctx': {
        "messages": mqtt_interface["messages"]
    },
}
